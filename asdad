script_key = 'X1C2V3B4N5M6A7S8D9F0G1H2J3K4L5POI'
getgenv().AutofarmSettings = {
  ["Fps"] = 60,
  ["Modalidad"] = 1,
  ["AntiAFK"] = true,
  ["Webhook"] = {
    ["URL"] = "",
    ["Interval"] = 60
  },
  ["ServerHoop"] = {
    ["Toggle"] = true,
    ["Type"] = 1,
    ["Deaths"] = 0,
    ["Blacklisted_IDs"] = {}
  }
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local RS = game:GetService("ReplicatedStorage")
local botIDs = {}

-- Variables del sistema LMG
local armasNecesarias = {
    ["[AUG]"] = true,
    ["[Rifle]"] = true
}

local mainEvent = RS:WaitForChild("MainEvent", 10)
if not mainEvent then
    warn("No encontré ReplicatedStorage.MainEvent")
end

local codesList = {
    "BRAINROT",
    "LUXE",
    "TURBO"
}

task.spawn(function()
    for _, currentCode in ipairs(codesList) do
        local argsTable = {
            "EnterPromoCode",
            currentCode
        }
        mainEvent:FireServer(unpack(argsTable))
        task.wait(10) -- espera 10 segundos sin frenar los demás scripts
    end
end)

-- Variables del sistema Anti-Jail
local antiJailRunning = false
local jailProcessActive = false
local keyItemName = "[Key]"

local isAutoShooting = false
local currentTarget = nil
local sistemaInicializado = false

for i, v in pairs(workspace:GetDescendants()) do
    if v:IsA("Seat") then
        v:Destroy()
    end
end

-- if not getgenv or not getgenv().PayloadAccess then
 --    player:Kick("nigga.")
 --    return
-- end

-- Invalida la flag para que no se re-use
getgenv().PayloadAccess = nil

-- src/UIS/etc/function.lua --

local function addCorner(uiObject, scale, offset)
    local c = Instance.new("UICorner", uiObject)
    c.CornerRadius = UDim.new(scale or 12, offset or 12)
end

local function formatWithCommas(number)
    return tostring(number):reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
end

-- src/UIS/etc/variables.lua --

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local MainFrame = Instance.new("Frame")
local MarcoGris = Instance.new("Frame")
local Principal = Instance.new("Frame") -- Contenedor principal
local Nombre = Instance.new("TextLabel") -- Nombre del cliente
local TimeDHC = Instance.new("TextLabel") -- Tiempo farmeando
local MarcoGris2 = Instance.new("Frame")
local Principal2 = Instance.new("Frame") -- Contenedor dinero
local OldMoney = Instance.new("TextLabel")
local FarmingDHC = Instance.new("TextLabel")
local NewMoney = Instance.new("TextLabel")

local OldMoneyReal = Instance.new("TextLabel")
local FarmingReal = Instance.new("TextLabel")
local NewMoneyReal = Instance.new("TextLabel")
local Status = Instance.new("TextLabel")

-- 📌 Configuraciones personalizadas por cajero (identificados por posición)
local cajeroConfigs = {
    -- Formato: [Vector3.new(x,y,z)] = {offsetY = valor, offsetZ = valor}
    [Vector3.new(-474.3752136230469, 24.99999237060547, -292.2875671386719)] = { -- cajero de banco
        offsetX = -2.5,
        offsetY = 3.5,
        offsetZ = 0
    },
    [Vector3.new(-474.1751708984375, 25.000017166137695, -284.087646484375)] = { -- cajero de banco
        offsetX = -2.5,
        offsetY = 3.5,
        offsetZ = 0
    },
    [Vector3.new(-474.1751708984375, 25.000017166137695, -276.287841796875)] = { -- cajero de banco
        offsetX = -2.5,
        offsetY = 3.5,
        offsetZ = 0
    },
    [Vector3.new(-248.9751739501953, 23.905187606811523, -410.6875915527344)] = { -- zapateria 
        offsetX = -3,
        offsetY = 3.5,
        offsetZ = 0
    },
    [Vector3.new(-3.8986852169036865, 23.500019073486328, -102.81074523925781)] = { -- barber shop de bomberos 
        offsetX = 1,
        offsetY = 3.5,
        offsetZ = 3
    },
    [Vector3.new(584.40185546875, 50.800025939941406, -273.4644775390625)] = { -- Gasolinera de factory
        offsetX = 0,
        offsetY = 3.5,
        offsetZ = -2
    },
    [Vector3.new(596.3018798828125, 53.366783142089844, -471.41094970703125)] = { -- Tacos de tactical
        offsetX = 1,
        offsetY = 5,
        offsetZ = 2
    },
    [Vector3.new(-450.2978820800781, 24.900001525878906, -330.16424560546875)] = { -- Atm de afuera de banco
        offsetX = -0.7,
        offsetY = 11,
        offsetZ = -1.5
    },
    [Vector3.new(95.30172729492188, 24.700010299682617, -519.1631469726562)] = { -- Cajero de hospital
        offsetX = -5,
        offsetY = 5,
        offsetZ = -0.5
    },
    [Vector3.new(-403.16265869140625, 24.899999618530273, -591.0032348632812)] = { -- Cajero de armas abajo (el que esta altura de banco)
        offsetX = 0.5,
        offsetY = 8,
        offsetZ = 0
    },
    [Vector3.new(519.2359008789062, 51.30000305175781, -303.0762023925781)] = { -- Gasolinera cajero Factory, el que esta a lado, no adentro.
        offsetX = -0.5, 
        offsetY = 8,
        offsetZ = 0
    },
    [Vector3.new(-219.30860900878906, 25.10000228881836, -785.353759765625)] = { -- Cajero de armas abajo ( parque )
        offsetX = 0,
        offsetY = 7,
        offsetZ = 0
    },
    [Vector3.new(576.7017822265625, 53.366783142089844, -471.41058349609375)] = { -- Tacos de tactical
        offsetX = 1,
        offsetY = 5,
        offsetZ = 2
    },
    [Vector3.new(-481.49822998046875, 24.500017166137695, -79.910888671875)] = { -- Cajero en donde se compra armarios para la casa
        offsetX = 0,
        offsetY = 6.5,
        offsetZ = 1.5
    },
    [Vector3.new(-623.9984741210938, 24.90001678466797, -285.0622253417969)] = { -- cajero problematico ID 15
        offsetX = -0.5,
        offsetY = 0.5,
        offsetZ = -0.2
    },
    [Vector3.new(-626.9984741210938, 24.90001678466797, -285.0621643066406)] = { -- cajero problematico ID 16
        offsetX = -0.5,
        offsetY = 0.5,
        offsetZ = -0.2
    },
    [Vector3.new(-809.5208740234375, 24.900001525878906, -286.1871643066406)] = { -- Cajero de casino, el que esta al costado de la piscina 
        offsetX = 0.5,
        offsetY = 7.5,
        offsetZ = 0
    },
    [Vector3.new(-940.498779296875, 24.900001525878906, -162.76400756835938)] = { -- Cajero de cine, el que esta por casino
        offsetX = 0.5,
        offsetY = 8,
        offsetZ = 0.5
    },
    [Vector3.new(-950.89892578125, 24.900001525878906, -162.76400756835938)] = { -- Cajero de cine, el que esta por casino
        offsetX = 0.5,
        offsetY = 8,
        offsetZ = 0.5
    },
    [Vector3.new(-862.198486328125, 24.500015258789062, -90.90840911865234)] = { -- Cajero de casino, casino.
        offsetX = 0,
        offsetY = 2,
        offsetZ = 0.5
    },
    [Vector3.new(-871.3983764648438, 24.500015258789062, -90.90840911865234)] = { -- Cajero de casino, casino.
        offsetX = 0,
        offsetY = 2,
        offsetZ = 0.5
    },
    [Vector3.new(-554.5250854492188, 25.17499351501465, 269.14996337890625)] = { -- Cajero de colegio, el cajero cajero. (ATM)
        offsetX = -2,
        offsetY = 5.5,
        offsetZ = -1.5
    },  
    [Vector3.new(-612.35009765625, 23.67499542236328, 270.6750183105469)] = { -- Cajero de colegio, en donde se vende comida
        offsetX = 0,
        offsetY = 7,
        offsetZ = 1.5
    },
    [Vector3.new(-937.2838745117188, 23.80324935913086, -657.3499145507812)] = { -- Cajero de lavandaria, en donde se vende leche y eso 
        offsetX = -0.5,
        offsetY = -0.5,
        offsetZ = 0
    },
    [Vector3.new(-937.2838745117188, 23.80324935913086, -664.3499145507812)] = { -- Cajero de lavandaria, en donde se vende leche y eso 
        offsetX = -0.5,
        offsetY = -0.5,
        offsetZ = 0
    },
    [Vector3.new(-859.6049194335938, 23.92999839782715, -660.2750244140625)] = { -- Cajero de lavandaria, en donde se compra el pegamento
        offsetX = 1,
        offsetY = 5.5,
        offsetZ = 0
    },
    [Vector3.new(-795.9052734375, 23.80215072631836, -655.1375122070312)] = { -- Cajero en donde se compra vehiculos
        offsetX = -0.5,
        offsetY = 5.5,
        offsetZ = -0.5
    },
}

-- Función para obtener configuración de un cajero específico
local function obtenerConfigCajero(posicionCajero)
    for coordenada, config in pairs(cajeroConfigs) do
        -- Comparar con tolerancia de 0.1 studs
        if (posicionCajero - coordenada).Magnitude < 0.1 then
            return config
        end
    end
    
    -- Configuración por defecto si no se encuentra
    return {offsetX = 0, offsetY = -4, offsetZ = 0}
end

-- UI Setup
MainFrame.Size = UDim2.new(1, 0, 1, 0)
MainFrame.Position = UDim2.new(0, 0, 0, 0)
MainFrame.ZIndex = 1
MainFrame.Visible = false
MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.Parent = ScreenGui

MarcoGris.Size = UDim2.new(0, 404, 0, 265)
MarcoGris.Position = UDim2.new(0.5, 0, 0.5, 0)
MarcoGris.AnchorPoint = Vector2.new(0.5, 0.5)
MarcoGris.ZIndex = 2
MarcoGris.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
MarcoGris.Parent = MainFrame
addCorner(MarcoGris, 0, 40)

Principal.Size = UDim2.new(0, 400, 0, 261)
Principal.Position = UDim2.new(0, 2, 0, 2)
Principal.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Principal.Parent = MarcoGris
Principal.ZIndex = 3
addCorner(Principal, 0, 40)

local DisplayDelUsuario = game.Players.LocalPlayer.DisplayName
Nombre.BackgroundTransparency = 1
Nombre.Position = UDim2.new(0.325, 0, 0.034, 0)
Nombre.Size = UDim2.new(0, 140, 0, 32)
Nombre.Text = DisplayDelUsuario
Nombre.ZIndex = 4
Nombre.TextScaled = true
Nombre.TextColor3 = Color3.fromRGB(104, 104, 104)
Nombre.Parent = Principal

TimeDHC.Size = UDim2.new(0, 84, 0, 41)
TimeDHC.Position = UDim2.new(0.743, 0, 0.015, 0)
TimeDHC.BackgroundTransparency = 1
TimeDHC.Text = "00:00:00"
TimeDHC.TextScaled = true
TimeDHC.ZIndex = 4
TimeDHC.TextColor3 = Color3.fromRGB(104, 104, 104)
TimeDHC.Parent = Principal

Status.Size = UDim2.new(0, 200, 0, 50)
Status.Position = UDim2.new(0.25, 0, 0.808, 0)
Status.BackgroundTransparency = 1
Status.TextSize = 17
Status.Text = "Loading LMG System..."
Status.ZIndex = 32
Status.TextColor3 = Color3.fromRGB(104, 104, 104)
Status.Parent = Principal

MarcoGris2.Size = UDim2.new(0, 361, 0, 157)
MarcoGris2.Position = UDim2.new(0.05, 0, 0.226, 0)
MarcoGris2.ZIndex = 5
MarcoGris2.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
MarcoGris2.Parent = Principal

Principal2.Size = UDim2.new(0, 357, 0, 153)
Principal2.Position = UDim2.new(0, 2, 0, 2)
Principal2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Principal2.Parent = MarcoGris2
Principal2.ZIndex = 6

-- Money UI
OldMoney.Size = UDim2.new(0, 162, 0, 50)
OldMoney.Position = UDim2.new(0.039, 0, 0, 0)
OldMoney.BackgroundTransparency = 1
OldMoney.Text = "Old Money:"
OldMoney.TextSize = 15
OldMoney.ZIndex = 7
OldMoney.TextColor3 = Color3.fromRGB(204, 204, 204)
OldMoney.Parent = Principal2
OldMoney.TextXAlignment = Enum.TextXAlignment.Left

FarmingDHC.Size = UDim2.new(0, 162, 0, 50)
FarmingDHC.Position = UDim2.new(0.039, 0, 0.288, 0)
FarmingDHC.BackgroundTransparency = 1
FarmingDHC.Text = "Farming:"
FarmingDHC.TextSize = 15
FarmingDHC.ZIndex = 7
FarmingDHC.TextColor3 = Color3.fromRGB(204, 204, 204)
FarmingDHC.Parent = Principal2
FarmingDHC.TextXAlignment = Enum.TextXAlignment.Left

NewMoney.Size = UDim2.new(0, 162, 0, 50)
NewMoney.Position = UDim2.new(0.039, 0, 0.576, 0)
NewMoney.BackgroundTransparency = 1
NewMoney.Text = "New Money:"
NewMoney.TextSize = 15
NewMoney.ZIndex = 7
NewMoney.TextColor3 = Color3.fromRGB(204, 204, 204)
NewMoney.Parent = Principal2
NewMoney.TextXAlignment = Enum.TextXAlignment.Left

OldMoneyReal.Size = UDim2.new(0, 200, 0, 50)
OldMoneyReal.Position = UDim2.new(0.35, 0, 0, 0)
OldMoneyReal.BackgroundTransparency = 1
OldMoneyReal.TextSize = 17
OldMoneyReal.ZIndex = 7
OldMoneyReal.TextColor3 = Color3.fromRGB(56, 236, 131)
OldMoneyReal.Parent = Principal2
OldMoneyReal.TextXAlignment = Enum.TextXAlignment.Left

FarmingReal.Size = UDim2.new(0, 200, 0, 50)
FarmingReal.Position = UDim2.new(0.28, 0, 0.288, 0)
FarmingReal.BackgroundTransparency = 1
FarmingReal.TextSize = 17
FarmingReal.ZIndex = 7
FarmingReal.Text = "$0"
FarmingReal.TextColor3 = Color3.fromRGB(56, 236, 131)
FarmingReal.Parent = Principal2
FarmingReal.TextXAlignment = Enum.TextXAlignment.Left

NewMoneyReal.Size = UDim2.new(0, 200, 0, 50)
NewMoneyReal.Position = UDim2.new(0.37, 0, 0.573, 0)
NewMoneyReal.BackgroundTransparency = 1
NewMoneyReal.TextSize = 17
NewMoneyReal.ZIndex = 7
NewMoneyReal.TextColor3 = Color3.fromRGB(56, 236, 131)
NewMoneyReal.Parent = Principal2
NewMoneyReal.TextXAlignment = Enum.TextXAlignment.Left

-- src/logic/buyer.lua --

local Kamaik = {
    yaProcesadoKO = false,
    AutoFarm = {
        isStomping = false,
        dineroActual = player:WaitForChild("DataFolder"):WaitForChild("Currency").Value,
        lastTarget,
        dineroTotalRecogido = 0,
        Core = nil,
        ignorados = {},
        TimeFarm = 0,
        posVuelo = nil,
        vueloThread = false,
        vueloActivo = false,
        lastStompTime = nil,
        deaths = 0
    },
    targettp = nil,
}

local function equiparArmas(armaPrincipal)
    local char = player.Character
    if not char then 
        warn("[DEBUG equiparArmas] No character found")
        return false 
    end
    
    local backpack = player.Backpack
    if not backpack then
        warn("[DEBUG equiparArmas] No backpack found")
        return false
    end
    
    local armas
    
    -- El ORDEN importa: la ÚLTIMA será la activa para disparar/recargar
    if armaPrincipal == "Rifle" then
        armas = {"[AUG]", "[Rifle]"}  -- Rifle será la activa
    elseif armaPrincipal == "AUG" then
        armas = {"[Rifle]", "[AUG]"}  -- AUG será la activa
    else
        warn("[DEBUG equiparArmas] Invalid weapon type: " .. tostring(armaPrincipal))
        return false
    end
    
    print("[DEBUG equiparArmas] Equipping for: " .. armaPrincipal)
    
    -- Equipar en el orden correcto
    for i, armaName in ipairs(armas) do
        local tool = backpack:FindFirstChild(armaName) or char:FindFirstChild(armaName)
        
        if not tool then
            warn("[DEBUG equiparArmas] Weapon not found: " .. armaName)
            return false
        end
        
        if tool:IsA("Tool") and tool.Parent == backpack then
            print("[DEBUG equiparArmas] Equipping " .. armaName .. " (step " .. i .. "/2)")
            tool.Parent = char
            task.wait(0.2)
        elseif tool.Parent == char then
            print("[DEBUG equiparArmas] " .. armaName .. " already equipped")
        end
    end
    
    task.wait(0.5)
    
    -- Verificar que AMBAS están equipadas con Handle
    local rifle = char:FindFirstChild("[Rifle]")
    local aug = char:FindFirstChild("[AUG]")
    
    if not rifle then
        warn("[DEBUG equiparArmas] Rifle not in character after equip")
        return false
    end
    
    if not aug then
        warn("[DEBUG equiparArmas] AUG not in character after equip")
        return false
    end
    
    if not rifle:FindFirstChild("Handle") then
        warn("[DEBUG equiparArmas] Rifle has no Handle")
        return false
    end
    
    if not aug:FindFirstChild("Handle") then
        warn("[DEBUG equiparArmas] AUG has no Handle")
        return false
    end
    
    print("[DEBUG equiparArmas] SUCCESS - Both weapons equipped with Handles")
    return true
end

-- FUNCIONES LMG SYSTEM
local function tieneTodasLasArmas()
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character
    if not backpack and not character then return false end

    local encontradas = {}

    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            if armasNecesarias[item.Name] then
                encontradas[item.Name] = true
            end
        end
    end

    if character then
        for _, item in ipairs(character:GetChildren()) do
            if armasNecesarias[item.Name] then
                encontradas[item.Name] = true
            end
        end
    end

    for arma, _ in pairs(armasNecesarias) do
        if not encontradas[arma] then
            return false
        end
    end

    return true
end

local function clickRifle()
    local shop = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Shop")
    if not shop then return false end
    local rifle = shop:FindFirstChild("[Rifle] - $1694")
    if not rifle then return false end

    local clicked = false
    local cd = rifle:FindFirstChildWhichIsA("ClickDetector", true)
    if cd and typeof(fireclickdetector) == "function" then
        pcall(function() fireclickdetector(cd) end)
        clicked = true
    end
    for _, desc in ipairs(rifle:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            pcall(function()
                if typeof(fireproximityprompt) == "function" then
                    fireproximityprompt(desc)
                else
                    desc.HoldDuration = 0
                    desc:InputHoldBegin()
                    task.wait(0.1)
                    desc:InputHoldEnd()
                end
            end)
            clicked = true
        end
    end
    return clicked
end

local function clickRifleAmmo()
    local shop = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Shop")
    if not shop then return false end
    local ammo = shop:FindFirstChild("5 [Rifle Ammo] - $273")
    if not ammo then return false end

    local clicked = false
    local cd = ammo:FindFirstChildWhichIsA("ClickDetector", true)
    if cd and typeof(fireclickdetector) == "function" then
        pcall(function() fireclickdetector(cd) end)
        clicked = true
    end
    for _, desc in ipairs(ammo:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            pcall(function()
                if typeof(fireproximityprompt) == "function" then
                    fireproximityprompt(desc)
                else
                    desc.HoldDuration = 0
                    desc:InputHoldBegin()
                    task.wait(0.1)
                    desc:InputHoldEnd()
                end
            end)
            clicked = true
        end
    end
    return clicked
end

local function clickAUG()
    local shop = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Shop")
    if not shop then return false end
    local aug = shop:FindFirstChild("[AUG] - $2131")
    if not aug then return false end

    local clicked = false
    local cd = aug:FindFirstChildWhichIsA("ClickDetector", true)
    if cd and typeof(fireclickdetector) == "function" then
        pcall(function() fireclickdetector(cd) end)
        clicked = true
    end
    for _, desc in ipairs(aug:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            pcall(function()
                if typeof(fireproximityprompt) == "function" then
                    fireproximityprompt(desc)
                else
                    desc.HoldDuration = 0
                    desc:InputHoldBegin()
                    task.wait(0.1)
                    desc:InputHoldEnd()
                end
            end)
            clicked = true
        end
    end
    return clicked
end

function limpiarVuelo()
    Kamaik.AutoFarm.vueloActivo = false
    Kamaik.AutoFarm.posVuelo = nil
    Kamaik.AutoFarm.vueloThread = false

    if workspace:FindFirstChild("Core") then
        workspace.Core:Destroy()
    end

    local char = player.Character
    if char then
        local root = char:FindFirstChild("HumanoidRootPart")
        if root then root.CanCollide = true end
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then humanoid.PlatformStand = false end
    end
end

function activarVueloNuevo(targetCFrame)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local root = character:WaitForChild("HumanoidRootPart")

    root.CFrame = targetCFrame
    root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
    root.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    
    local humanoid = character:WaitForChild("Humanoid")
    humanoid:ChangeState(Enum.HumanoidStateType.Landed)
    
    Kamaik.targettp = targetCFrame
    limpiarVuelo()
    task.wait(0.1)

    if workspace:FindFirstChild("Core") then
        workspace.Core:Destroy()
    end

    local Core = Instance.new("Part")
    Core.Name = "Core"
    Core.Size = Vector3.new(0.05, 0.05, 0.05)
    Core.Anchored = false
    Core.CanCollide = false
    Core.Transparency = 1
    Core.Parent = workspace

    local weld = Instance.new("Weld", Core)
    weld.Part0 = Core
    weld.Part1 = character:WaitForChild("LowerTorso")
    weld.C0 = CFrame.new(0, 0, 0)

    local torso = Core
    Kamaik.AutoFarm.vueloActivo = true
    Kamaik.AutoFarm.Core = Core
    Kamaik.AutoFarm.vueloThread = true

    root.CanCollide = false
    humanoid.PlatformStand = true

    task.spawn(function()
        local pos = Instance.new("BodyPosition", torso)
        local gyro = Instance.new("BodyGyro", torso)
        pos.Name = "EPIXPOS"
        pos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        pos.Position = targetCFrame.Position
        gyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        gyro.CFrame = targetCFrame

        while Kamaik.AutoFarm.vueloActivo do
            if root then
                root.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                root.CFrame = Kamaik.targettp
            end
            
            pos.Position = Kamaik.targettp.Position
            gyro.CFrame = Kamaik.targettp
            task.wait()
        end
    end)
end

local function teleportWithRandomFall()
    limpiarVuelo()
    local char = player.Character or player.CharacterAdded:Wait()
    if not char then return end
    
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    local randomPosition = Vector3.new(
        math.random(-38000000, 38000000), 
        math.random(0, 20000000), 
        math.random(-38000000, 38000000)
    )
    
    root.CFrame = CFrame.new(randomPosition)
    
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then 
        humanoid:ChangeState(Enum.HumanoidStateType.Freefall) 
    end
end


local function clickAmmo()
    local shop = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Shop")
    if not shop then return false end
    local ammo = shop:FindFirstChild("90 [AUG Ammo] - $87")
    if not ammo then return false end

    local clicked = false
    local cd = ammo:FindFirstChildWhichIsA("ClickDetector", true)
    if cd and typeof(fireclickdetector) == "function" then
        pcall(function() fireclickdetector(cd) end)
        clicked = true
    end
    for _, desc in ipairs(ammo:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            pcall(function()
                if typeof(fireproximityprompt) == "function" then
                    fireproximityprompt(desc)
                else
                    desc.HoldDuration = 0
                    desc:InputHoldBegin()
                    task.wait(0.1)
                    desc:InputHoldEnd()
                end
            end)
            clicked = true
        end
    end
    return clicked
end


local function attemptGetWeapons(timeoutSeconds)
    timeoutSeconds = timeoutSeconds or 30
    local character = player.Character or player.CharacterAdded:Wait()
    local HRP = character:WaitForChild("HumanoidRootPart")
    
    -- Primero obtener Rifle
    local rifleTP = Vector3.new(-259.6581726074219, 49.362728118896484, -213.51231384277344)
    local targetCFrame = CFrame.new(rifleTP + Vector3.new(0, 3, 0))
    
    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    
    local startTime = tick()
    while not player.Backpack:FindFirstChild("[Rifle]") and not character:FindFirstChild("[Rifle]") and (tick() - startTime) < timeoutSeconds do
        task.wait(1)
        clickRifle()
    end
    
    task.wait(1)
    
    -- Luego obtener AUG
    local augTP = Vector3.new(-273.0481872558594, 49.3634033203125, -213.31240844726562)
    targetCFrame = CFrame.new(augTP + Vector3.new(0, 3, 0))
    
    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    
    startTime = tick()
    while not player.Backpack:FindFirstChild("[AUG]") and not character:FindFirstChild("[AUG]") and (tick() - startTime) < timeoutSeconds do
        task.wait(1)
        clickAUG()
    end
    
    return tieneTodasLasArmas()
end

local function obtenerBalas()
    local tool = player.Character:FindFirstChildWhichIsA("Tool")
    if tool and tool.Name == "[AUG]" then
        local ammoVal = tool:FindFirstChild("Ammo") or tool:FindFirstChild("Clip") or tool:FindFirstChild("Bullets")
        if ammoVal and ammoVal:IsA("IntValue") then
            return ammoVal.Value, ammoVal
        end
    end
    return nil, nil
end

local function obtenerBalasRifle()
    local char = player.Character
    if not char then return nil, nil end
    
    -- Buscar primero en character
    local rifle = char:FindFirstChild("[Rifle]")
    if rifle then
        local ammoVal = rifle:FindFirstChild("Ammo") or rifle:FindFirstChild("Clip") or rifle:FindFirstChild("Bullets")
        if ammoVal and ammoVal:IsA("IntValue") then
            return ammoVal.Value, ammoVal
        end
    end
    
    -- Si no está en character, buscar en backpack
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        rifle = backpack:FindFirstChild("[Rifle]")
        if rifle then
            local ammoVal = rifle:FindFirstChild("Ammo") or rifle:FindFirstChild("Clip") or rifle:FindFirstChild("Bullets")
            if ammoVal and ammoVal:IsA("IntValue") then
                return ammoVal.Value, ammoVal
            end
        end
    end
    
    return nil, nil
end

local function obtenerBalasAUG()
    local char = player.Character
    if not char then return nil, nil end
    
    -- Buscar primero en character
    local aug = char:FindFirstChild("[AUG]")
    if aug then
        local ammoVal = aug:FindFirstChild("Ammo") or aug:FindFirstChild("Clip") or aug:FindFirstChild("Bullets")
        if ammoVal and ammoVal:IsA("IntValue") then
            return ammoVal.Value, ammoVal
        end
    end
    
    -- Si no está en character, buscar en backpack
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        aug = backpack:FindFirstChild("[AUG]")
        if aug then
            local ammoVal = aug:FindFirstChild("Ammo") or aug:FindFirstChild("Clip") or aug:FindFirstChild("Bullets")
            if ammoVal and ammoVal:IsA("IntValue") then
                return ammoVal.Value, ammoVal
            end
        end
    end
    
    return nil, nil
end

local function recargarRifle()
    print("[DEBUG recargarRifle] Starting Rifle reload process")
    
    local char = player.Character
    if not char then 
        warn("[DEBUG recargarRifle] No character found")
        return false 
    end
    
    -- PRIMERO: Verificar si el arma está en backpack o character
    local rifleInBackpack = player.Backpack:FindFirstChild("[Rifle]")
    local rifleInChar = char:FindFirstChild("[Rifle]")
    
    if not rifleInBackpack and not rifleInChar then
        warn("[DEBUG recargarRifle] Rifle not found in backpack or character!")
        return false
    end
    
    print("[DEBUG recargarRifle] Rifle found. Location: " .. (rifleInChar and "Character" or "Backpack"))
    
    -- SEGUNDO: Equipar ambas armas con Rifle como principal
    Status.Text = "Equipping Rifle for reload..."
    if not equiparArmas("Rifle") then
        warn("[DEBUG recargarRifle] Failed to equip weapons")
        return false
    end
    
    -- TERCERO: Esperar y verificar que el Rifle esté listo
    local maxWait = 5
    local waited = 0
    local tool = nil
    
    print("[DEBUG recargarRifle] Waiting for Rifle to be ready...")
    
    while waited < maxWait do
        tool = char:FindFirstChild("[Rifle]")
        if tool and tool:IsA("Tool") and tool.Parent == char then
            local handle = tool:FindFirstChild("Handle")
            if handle then
                print("[DEBUG recargarRifle] Rifle is ready with Handle")
                break
            else
                warn("[DEBUG recargarRifle] Rifle found but no Handle yet")
            end
        else
            warn("[DEBUG recargarRifle] Rifle not in character yet (waited: " .. waited .. "s)")
        end
        task.wait(0.2)
        waited = waited + 0.2
    end
    
    if not tool then
        warn("[DEBUG recargarRifle] Timeout waiting for Rifle")
        return false
    end
    
    -- CUARTO: Recargar
    task.wait(0.3)
    print("[DEBUG recargarRifle] Sending reload event to server")
    mainEvent:FireServer("Reload", tool)
    
    task.wait(0.5)
    print("[DEBUG recargarRifle] Reload complete")
    return true
end

local function recargarAUG()
    print("[DEBUG recargarAUG] Starting AUG reload process")
    
    local char = player.Character
    if not char then 
        warn("[DEBUG recargarAUG] No character found")
        return false 
    end
    
    -- PRIMERO: Verificar si el arma está en backpack o character
    local augInBackpack = player.Backpack:FindFirstChild("[AUG]")
    local augInChar = char:FindFirstChild("[AUG]")
    
    if not augInBackpack and not augInChar then
        warn("[DEBUG recargarAUG] AUG not found in backpack or character!")
        return false
    end
    
    print("[DEBUG recargarAUG] AUG found. Location: " .. (augInChar and "Character" or "Backpack"))
    
    -- SEGUNDO: Equipar ambas armas con AUG como principal
    Status.Text = "Equipping AUG for reload..."
    if not equiparArmas("AUG") then
        warn("[DEBUG recargarAUG] Failed to equip weapons")
        return false
    end
    
    -- TERCERO: Esperar y verificar que el AUG esté listo
    local maxWait = 5
    local waited = 0
    local tool = nil
    
    print("[DEBUG recargarAUG] Waiting for AUG to be ready...")
    
    while waited < maxWait do
        tool = char:FindFirstChild("[AUG]")
        if tool and tool:IsA("Tool") and tool.Parent == char then
            local handle = tool:FindFirstChild("Handle")
            if handle then
                print("[DEBUG recargarAUG] AUG is ready with Handle")
                break
            else
                warn("[DEBUG recargarAUG] AUG found but no Handle yet")
            end
        else
            warn("[DEBUG recargarAUG] AUG not in character yet (waited: " .. waited .. "s)")
        end
        task.wait(0.2)
        waited = waited + 0.2
    end
    
    if not tool then
        warn("[DEBUG recargarAUG] Timeout waiting for AUG")
        return false
    end
    
    -- CUARTO: Recargar
    task.wait(0.3)
    print("[DEBUG recargarAUG] Sending reload event to server")
    mainEvent:FireServer("Reload", tool)
    
    task.wait(0.5)
    print("[DEBUG recargarAUG] Reload complete")
    return true
end

local function comprarAmmoCompleta()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    -- CRÍTICO: Desequipar TODO antes de comprar
    if humanoid then
        humanoid:UnequipTools()
        task.wait(0.5)  -- Esperar más tiempo para asegurar
    end
    
    -- Comprar munición de Rifle
    local rifleAmmoTP = Vector3.new(-255.2581787109375, 49.36254119873047, -213.4822998046875)
    local targetCFrame = CFrame.new(rifleAmmoTP + Vector3.new(0, 3, 0))
    
    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    task.wait(1)
    
    for i = 1, 20 do
        Status.Text = "Buying Rifle ammo..."
        clickRifleAmmo()
        task.wait(0.5)
    end
    
    task.wait(1)
    
    -- Comprar munición de AUG
    local ammoTP = Vector3.new(-278.0326843261719, 49.36509323120117, -213.39381408691406)
    targetCFrame = CFrame.new(ammoTP + Vector3.new(0, 3, 0))
    
    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    task.wait(1)
    
    for i = 1, 14 do
        Status.Text = "Buying AUG ammo..."
        clickAmmo()
        task.wait(0.5)
    end
    
    teleportWithRandomFall() 
    Status.Text = "Resuming farm..."
end


local function recargar()
    local tool = player.Character:FindFirstChildWhichIsA("Tool")
    if tool and tool.Name == "[AUG]" then
        mainEvent:FireServer("Reload", tool)
        return true
    end
    return false
end

local function comprarAmmo()
    local character = player.Character or player.CharacterAdded:Wait()
    local HRP = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        humanoid:UnequipTools()
        task.wait(0.3)
    end
    local ammoTP = Vector3.new(-278.0326843261719, 49.36509323120117, -213.39381408691406)
    local targetCFrame = CFrame.new(ammoTP + Vector3.new(0, 3, 0))

    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    task.wait(1)
    for i = 1, 14 do
        Status.Text = "Wait me pls..."
        clickAmmo()
        task.wait(0.5)
    end
    teleportWithRandomFall() 
    Status.Text = "Resuming farm..."
end

-- ============= SISTEMA ANTI-JAIL =============
local function verificarYRecargarLMG()
    local char = player.Character
    if not char then return false end
    
    if not tieneTodasLasArmas() then
        Status.Text = "Anti-Jail: Getting weapons..."
        if not attemptGetWeapons() then
            return false
        end
        task.wait(0.5)
    end
    
    -- Verificar munición de ambas armas
    task.wait(0.3)
    local balasRifle = obtenerBalasRifle()
    local balasAUG = obtenerBalasAUG()
    
    if (not balasRifle or balasRifle <= 0) or (not balasAUG or balasAUG <= 0) then
        Status.Text = "Anti-Jail: Reloading weapons..."
        
        if not balasRifle or balasRifle <= 0 then
            recargarRifle()
            task.wait(1)
        end
        
        if not balasAUG or balasAUG <= 0 then
            recargarAUG()
            task.wait(1)
        end
        
        -- Si sigue sin balas, comprar
        balasRifle = obtenerBalasRifle()
        balasAUG = obtenerBalasAUG()
        
        if (not balasRifle or balasRifle <= 0) or (not balasAUG or balasAUG <= 0) then
            Status.Text = "Anti-Jail: Buying Ammo..."
            comprarAmmoCompleta()
            task.wait(3)
            recargarRifle()
            task.wait(1)
            recargarAUG()
            task.wait(1)
        end
    end
    
    return true
end

local function clickKey()
    local shop = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Shop")
    if not shop then 
        warn("Shop not found")
        return false 
    end
    
    local keyItem = shop:FindFirstChild("[Key] - $137")
    if not keyItem then 
        warn("Key item not found in shop")
        return false 
    end

    local clicked = false
    
    -- Intentar con ClickDetector en todos los descendants
    for _, desc in ipairs(keyItem:GetDescendants()) do
        if desc:IsA("ClickDetector") then
            if typeof(fireclickdetector) == "function" then
                local success = pcall(function() 
                    fireclickdetector(desc) 
                end)
                if success then
                    clicked = true
                    break
                end
            end
        end
    end
    
    -- Si no funcionó con ClickDetector, intentar con ProximityPrompt
    if not clicked then
        for _, desc in ipairs(keyItem:GetDescendants()) do
            if desc:IsA("ProximityPrompt") then
                pcall(function()
                    if typeof(fireproximityprompt) == "function" then
                        fireproximityprompt(desc)
                    else
                        desc.HoldDuration = 0
                        desc:InputHoldBegin()
                        task.wait(0.1)
                        desc:InputHoldEnd()
                    end
                end)
                clicked = true
                break
            end
        end
    end
    
    return clicked
end

local function stopAutoShoot()
    isAutoShooting = false
    currentTarget = nil
end

local function checkJailStatus()
    local df = player:FindFirstChild("DataFolder")
    local info = df and df:FindFirstChild("Information")
    local jailValue = info and info:FindFirstChild("Jail")
    
    if jailValue then
        local jailTime = tonumber(jailValue.Value)
        if jailTime and jailTime > 0 then
            return true, jailTime
        end
    end
    
    return false, 0
end

local function unJailProcess()
    if antiJailRunning then return end
    antiJailRunning = true
    jailProcessActive = true  -- BLOQUEAR TODO
    
    Status.Text = "Anti-Jail: Detected jail time"
    
    -- Detener cualquier disparo activo
    stopAutoShoot()
    limpiarVuelo()
    
    local keyTarget = workspace:FindFirstChild("Ignored") and 
                      workspace.Ignored:FindFirstChild("Shop") and 
                      workspace.Ignored.Shop:FindFirstChild("[Key] - $137")
    
    if not keyTarget or not keyTarget:FindFirstChild("Head") then
        Status.Text = "Anti-Jail: Key shop not found"
        antiJailRunning = false
        jailProcessActive = false
        return
    end
    
    local keyPosition = Vector3.new(-271, 24, -245)
    local targetCFrame = CFrame.new(keyPosition + Vector3.new(0, 3, 0))
    Status.Text = "Anti-Jail: Flying to key shop..."
    
    pcall(function()
        activarVueloNuevo(targetCFrame)
    end)
    
    task.wait(2)
    
    -- Comprar llave
    Status.Text = "Anti-Jail: Buying key..."
    for i = 1, 5 do
        clickKey()
        task.wait(0.5)
    end
    
    task.wait(1)
    
    -- Equipar llave
    local backpack = player:FindFirstChild("Backpack")
    if backpack and backpack:FindFirstChild(keyItemName) then
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                Status.Text = "Anti-Jail: Equipping key..."
                pcall(function()
                    humanoid:EquipTool(backpack[keyItemName])
                end)
                task.wait(2)  -- Esperar más tiempo
            end
        end
    end
    
    -- Esperar a que se use la llave y salga de jail
    Status.Text = "Anti-Jail: Waiting to escape..."
    local maxWait = 15
    local waited = 0
    while waited < maxWait do
        task.wait(1)
        waited = waited + 1
        
        local stillJailed, currentJailTime = checkJailStatus()
        if not stillJailed then
            Status.Text = "Anti-Jail: Successfully escaped!"
            break
        end
    end
    
    -- Verificación final
    local finalCheck, _ = checkJailStatus()
    if finalCheck then
        Status.Text = "Anti-Jail: Still jailed, restarting..."
        antiJailRunning = false
        jailProcessActive = false
        task.wait(2)
        unJailProcess()  -- Reintentar
        return
    end
    
    -- Preparar LMG
    if verificarYRecargarLMG() then
        Status.Text = "Anti-Jail: Ready to resume"
    end
    
    teleportWithRandomFall()
    task.wait(2)
    
    antiJailRunning = false
    jailProcessActive = false  
end

local function startAutoShoot(target, armaPrincipal)
    if not target or not target:FindFirstChild("Head") then return end
    
    currentTarget = target
    isAutoShooting = true
    
    local connection
    connection = RunService.Heartbeat:Connect(function()   
        if not currentTarget or not currentTarget.Parent or not currentTarget:FindFirstChild("Humanoid") or currentTarget.Humanoid.Health <= 0 then
            isAutoShooting = false
            connection:Disconnect()
            return
        end
        
        local head = currentTarget:FindFirstChild("Head")
        if not head then
            isAutoShooting = false
            connection:Disconnect()
            return
        end
        
        local char = player.Character
        if not char then return end
        
        -- Determinar qué arma usar según armaPrincipal
        local toolName = armaPrincipal == "Rifle" and "[Rifle]" or "[AUG]"
        local tool = char:FindFirstChild(toolName)
        
        if not tool or not tool:FindFirstChild("Handle") then
            local backpackTool = player.Backpack:FindFirstChild(toolName)
            if backpackTool then
                backpackTool.Parent = char
                task.wait(0.1)
                return
            else
                isAutoShooting = false
                connection:Disconnect()
                return
            end
        end
        
        local ok, err = pcall(function()
            mainEvent:FireServer(
                "ShootGun",
                tool.Handle,
                tool.Handle.CFrame.Position,
                head.Position,
                head,
                Vector3.new(0, 0, -1)
            )
        end)
        
        if not ok then
            warn("FireServer fallo: ", err)
        end
    end)
end

local function autoReloadSystem()
    task.spawn(function()
        print("[DEBUG autoReloadSystem] System initialized")
        while true do
            task.wait(0.5)
            
            if jailProcessActive then
                task.wait(2)
                continue
            end
            
            -- NO HACER NADA si hay target activo o disparando
            if isAutoShooting or Kamaik.AutoFarm.lastTarget then
                task.wait(1)
                continue
            end
            
            local char = player.Character
            if not char then 
                task.wait(1)
                continue 
            end
            
            -- VERIFICAR SOLO AUG (Rifle se recarga cuando no hay cajeros)
            local balasAUG = obtenerBalasAUG()
            
            print("[DEBUG autoReloadSystem] AUG: " .. tostring(balasAUG))
            
            -- SI AUG ESTÁ VACÍA, RECARGAR
            if balasAUG and balasAUG == 0 then
                print("[DEBUG autoReloadSystem] AUG empty - reloading")
                Status.Text = "Reloading AUG..."
                
                local reloadSuccess = recargarAUG()
                
                if not reloadSuccess then
                    warn("[DEBUG autoReloadSystem] AUG reload failed - buying ammo")
                    comprarAmmoCompleta()
                    task.wait(2)
                    recargarAUG()
                    task.wait(1)
                    continue
                end
                
                task.wait(1)
                local nuevasBalas = obtenerBalasAUG()
                if nuevasBalas and nuevasBalas > 20 then
                    Status.Text = "AUG Reload Success"
                    print("[DEBUG autoReloadSystem] AUG reloaded successfully")
                end
            end
            
            -- VERIFICAR SI AMBAS ESTÁN VACÍAS (caso crítico)
            local balasRifle = obtenerBalasRifle()
            if (not balasRifle or balasRifle == 0) and (not balasAUG or balasAUG == 0) then
                warn("[DEBUG autoReloadSystem] BOTH weapons empty - buying all ammo")
                Status.Text = "Both weapons empty - buying all ammo..."
                
                comprarAmmoCompleta()
                task.wait(2)
                recargarRifle()
                task.wait(1)
                recargarAUG()
                task.wait(1)
                
                Status.Text = "All ammo purchased successfully"
                print("[DEBUG autoReloadSystem] All ammo purchased and reloaded")
            end
        end
    end)
end

for _, cajero in ipairs(workspace:WaitForChild("Cashiers"):GetChildren()) do
    if cajero:FindFirstChild("Humanoid") and cajero:FindFirstChild("Head") then
        for _, parte in ipairs(cajero:GetDescendants()) do
            if parte:IsA("BasePart") then
                parte.CanCollide = false
            end
        end
    end
end

local HttpService = game:GetService("HttpService")
local req = http_request or request

getgenv().AutofarmSettings = getgenv().AutofarmSettings or {}
getgenv().AutofarmSettings["Fps"] = getgenv().AutofarmSettings["Fps"] or 60
getgenv().AutofarmSettings["Webhook"] = getgenv().AutofarmSettings["Webhook"] or {}
getgenv().AutofarmSettings["Webhook"]["URL"] = getgenv().AutofarmSettings["Webhook"]["URL"] or ""
getgenv().AutofarmSettings["Webhook"]["Interval"] = getgenv().AutofarmSettings["Webhook"]["Interval"] or 10

-- Webhook system
task.spawn(function()
    local webhookURL = getgenv().AutofarmSettings["Webhook"]["URL"]
    local webhookInterval = getgenv().AutofarmSettings["Webhook"]["Interval"]

    if webhookURL ~= "" then
        local adjustedInterval = (webhookInterval * 60) * 1.5
        
        while task.wait(adjustedInterval) do
            local thumbnailUrl = "https://tr.rbxcdn.com/30DAY-AvatarHeadshot-Png/420x420.png"
            local success, response = pcall(function()
                return req({
                    Url = "https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. player.UserId .. "&size=150x150&format=Png&isCircular=false",
                    Method = "GET",
                    Headers = { ["User-Agent"] = "Roblox" },
                })
            end)

            if success and response.Success then
                local data = HttpService:JSONDecode(response.Body)
                if data and data.data and data.data[1] and data.data[1].imageUrl then
                    thumbnailUrl = data.data[1].imageUrl
                end
            end

            local data = {
                avatar_url = "https://cdn.discordapp.com/attachments/1405030839393189968/1410075673715933214/da-hood-codes-july-2024_xdxa.png",
                username = "AutoDHC",
                embeds = {{
                    title = "Webhook - " .. player.DisplayName,
                    color = 5626245,
                    timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z"),
                    thumbnail = { url = thumbnailUrl },
                    fields = {
                        { name = "Farming:", value = "```" .. FarmingReal.Text .. "```", inline = true },
                        { name = "New Money:", value = "```" .. NewMoneyReal.Text .. "```", inline = true },
                        { name = "Time Elapsed:", value = "```" .. TimeDHC.Text .. "```", inline = false }
                    }
                }}
            }

            pcall(function()
                req({
                    Url = webhookURL,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = HttpService:JSONEncode(data)
                })
            end)
        end
    end
end)

OldMoneyReal.Text = "$" .. formatWithCommas(Kamaik.AutoFarm.dineroActual)
NewMoneyReal.Text = "$" .. formatWithCommas(Kamaik.AutoFarm.dineroActual)

local dineroStats = player:WaitForChild("DataFolder"):WaitForChild("Currency")

dineroStats:GetPropertyChangedSignal("Value"):Connect(function()
    if dineroStats.Value ~= Kamaik.AutoFarm.dineroActual then
        local diferencia = dineroStats.Value - Kamaik.AutoFarm.dineroActual
        if diferencia > 0 then
            Kamaik.AutoFarm.dineroTotalRecogido += diferencia
            FarmingReal.Text = "$" .. formatWithCommas(Kamaik.AutoFarm.dineroTotalRecogido)
            NewMoneyReal.Text = "$" .. formatWithCommas(dineroStats.Value)
        end
        Kamaik.AutoFarm.dineroActual = dineroStats.Value
    end
end)

-- server hop
local defaultBlacklistedIDs = {
    667867137, 195399682, 133136396, 1523513359, 2314160157, 368128037, 143288359, 142632999, 1910378535, 730417201, 57393204, 2693040181, 244844600, 1641635899, 929888317, 1538998338, 94763083, 890658894, 1339371605, 425328729, 2407503963, 1288285, 202334307, 2327001188, 295762020, 1731561580, 2395613299, 572110963, 1906833526, 56602747, 3272274043, 1729667205, 1897257102, 1459611794, 3333755037, 469524638, 338972829, 394803371, 5459075255, 315592893, 406735038, 5849024706, 1662851274, 977897682, 691818708, 3790829783, 3185389788, 905486560, 638636257, 601262307, 11522278, 84570351, 7198900465, 582848759, 797102336, 97136896, 4303763714, 2938620172, 113950996, 373563679, 219316519, 145740081, 2455599428, 78295368, 29761878, 2494599530, 80974189, 534344045, 1679536495, 1181614445, 1125992823, 628662650, 1137631616, 4932403585, 4338260355, 948787588, 1830168970, 2882918795, 96315796, 3723397535, 665469352, 88134065, 667169207, 31846842, 106672573, 1098138046, 178663874, 253993416, 221295049, 53715402, 52535762, 2780817879, 4969374172, 2028200414, 1638849002, 993348074, 372914675, 1001482742, 1367411191, 1708929528, 4727925243, 110928385, 259420681, 89473551, 76272143, 104796690, 7077693971, 288465430, 417219097, 3950637598, 173500963, 3146992168, 1485126185, 1981461035, 1527425585, 1726476853, 325087804, 213277245, 460997185, 878279238, 2589966928, 219056725, 139852375, 281175, 2278707804, 5019169384, 149238381, 240075378, 473150067, 186804856, 2393807480, 3611927169, 3176655491, 1391475335, 95101575, 2352517769, 94102158, 3053056654, 79714966, 939920025, 633295515, 133827245, 191961778, 5136267958, 4656808630, 1029137081, 4509659838, 2230964929, 41372359, 91167436, 563505869, 2338712284, 1947198187, 588298991, 419293944, 1644663549, 2773773063, 246522640, 69612307, 3146910490, 196453148, 3243760417, 5476000547, 1091633963, 1436460, 88245038, 2250695471, 3894123313, 893610805, 1246909240, 226523973, 29242182, 1075239751, 111186760, 919135046, 3055227728, 576904024, 1570505562, 2406939482, 29438812, 127492959, 2212830051, 50801509, 171832169, 63531881, 5070197615, 6124600180, 23337851, 126284670, 721443713, 25490309, 2348905353, 4437818262, 359209880, 1593707423, 499671971, 321178532, 75750310, 464358320, 732240818, 21345211, 399907775, 1155756998, 4365585353, 435981261, 479990735, 53421021, 476419039, 652143586, 422314979, 4395852780, 114394094, 2320169967, 175846384, 3983012846, 3200707570, 1494483959, 212276218, 7389058043, 4799579130, 5817777160, 4002499592, 339868684, 971662350, 779973647, 385530900, 910085146, 118842399, 286293026, 8850467, 3944434729, 224068649, 9006132, 3751625791, 2521650242, 371528772, 386745414, 2456681546, 2700510295, 1220684901, 409187435, 81720432, 855350386, 5348287604, 296295541, 439942262, 534942844, 1516086396, 1373313, 123597957, 1177029768, 8195210, 186731666, 303660180, 1962396833, 545752225, 1335471269, 81900718, 3934559413, 693429, 1333636279, 53114045, 2311902400, 448443585, 14740678, 1063187678, 4061250786, 1878414563, 4337241317, 2640311526, 38079729, 1174637810, 521182451, 65217781, 1484221690, 418479356, 680971517, 3390225662, 7470462205, 5554615552, 484459776, 812291, 4448767244, 95397144, 3619583261, 3354916126, 3689221411, 9221415, 1394101548, 1720771884, 133229872, 1129106736, 971193650, 969098547, 273163572, 2695980342, 326671671, 1446694201, 3705441594, 103241021, 1678675262, 784956738, 328566086, 151438665, 334187851, 187501902, 178740562, 859071826, 110398802, 207355228, 86256991, 1118543199, 293014882, 544064867, 2456939876, 8704742767, 1107873139, 78239093, 1539642742, 22009222, 2396923272, 1390773641, 3718161806, 7001683347, 1424338327, 79242647, 1688591768, 102507934, 920409507, 372815271, 416923057, 202106293, 2064231863, 5545404, 2879356349, 464135620, 119770566, 4423402956, 127663566, 4434472404, 110112214, 139009494, 2336443864, 1304800729, 1319112150, 5832953307, 337774043, 277634539, 1688851949, 1520002548, 2269462008, 620269054, 2238004736, 2846299656, 7092131341, 2588495375, 460750353, 225429011, 322186771, 2063398426, 952772126, 93101606, 14921263, 2207291, 1410854465, 186480194, 1778855490, 1440767553, 170526279, 408766031, 582063704, 1116204633, 2248488540, 444841570, 874677864, 16049776, 79474, 4717217397, 1680068241, 30586516, 228204181, 2330781345, 7168220833, 1925852836, 310775464, 2474507945, 336965291, 3488718508, 660358844, 171087551, 110792388, 3133243078, 385900233, 2209283788, 8886994638, 4239065, 1561226973, 948293345, 3044484840, 2400546537, 4450100976, 35913464, 654712576, 1958352651, 632026895, 318463765, 271083290, 448679712, 3144236841, 3525918505, 32581425, 2360878898, 40527673, 386699067, 298940220, 463494977, 3931862850, 448012101, 443031366, 294268763, 1079746396, 1149980511, 3387514724, 278632296, 6074834798, 146712433, 149290866, 2962579319, 752396154, 1573228410, 999511943, 181125001, 3192549270, 181751703, 69236636, 686532510, 1470379939, 2205951910, 274220978, 524527539, 1947015091, 607348662, 4002541497, 817620921, 1797875653, 1139085255, 343431112, 486389707, 2827093972, 1781127128, 1739497432, 99356639, 2856873958, 108083180, 1395193841, 1947590641, 970166262
}

local function getBotIDsFromAPI()
    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = "https://kamaik-autofarm.uk/api/clientes/get-all-ids",
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({
                key = script_key,
            })
        })
    end)

    if success and response.StatusCode == 200 then
        local data = HttpService:JSONDecode(response.Body)
        botIDs = data.idsArray or {}
    else
        botIDs = {}
    end
end

getBotIDsFromAPI()

local function serverHop()
    Kamaik.yaProcesadoKO = false
    Kamaik.AutoFarm.isStomping = false
    Kamaik.AutoFarm.lastTarget = nil
    Kamaik.AutoFarm.dineroTotalRecogido = 0
    Kamaik.AutoFarm.ignorados = {}
    Kamaik.AutoFarm.TimeFarm = 0
    Kamaik.AutoFarm.lastStompTime = nil
    Kamaik.AutoFarm.deaths = 0

    Kamaik.AutoFarm.dineroActual = player:WaitForChild("DataFolder"):WaitForChild("Currency").Value
    Status.Text = "ServerHopping..."
    local Player = game.Players.LocalPlayer    
    local Http = game:GetService("HttpService")
    local TPS = game:GetService("TeleportService")
    local Api = "https://games.roblox.com/v1/games/"
    
    local _place, _id = game.PlaceId, game.JobId

    local sortOrder
    if getgenv().AutofarmSettings.ServerHoop.Type == 1 then
        sortOrder = "Asc"
    else
        sortOrder = "Desc"
    end
    
    local _servers = Api .. _place .. "/servers/Public?sortOrder=" .. sortOrder .. "&limit=100"

    local function ListServers(cursor)
        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor=" .. cursor) or ""))
        return Http:JSONDecode(Raw)
    end

    local Next
    repeat
        local Servers = ListServers(Next)
        for _, v in ipairs(Servers.data) do
            if v.playing < v.maxPlayers and v.id ~= _id then
                local blacklisted = false
                for _, bid in ipairs(getgenv().AutofarmSettings.ServerHoop.Blacklisted_IDs or {}) do
                    if v.id == tostring(bid) then
                        blacklisted = true
                        break
                    end
                end

                if not blacklisted then
                    local s, r = pcall(TPS.TeleportToPlaceInstance, TPS, _place, v.id, Player)
                    if s then 
                        break
                    end
                end
            end
        end
        Next = Servers.nextPageCursor
    until not Next

    task.wait(5)
    serverHop()
end

local function checkBlacklistedPlayers()
    -- Si ServerHoop está desactivado, no hacer nada
    if not getgenv().AutofarmSettings.ServerHoop.Toggle then
        return false
    end
    
    local blacklistedIDs = getgenv().AutofarmSettings.ServerHoop.Blacklisted_IDs or {}
    local combinedBlacklist = {}
    
    for _, id in ipairs(defaultBlacklistedIDs) do
        combinedBlacklist[tostring(id)] = true
    end

    for _, id in ipairs(blacklistedIDs) do
        combinedBlacklist[tostring(id)] = true
    end

    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= game.Players.LocalPlayer and combinedBlacklist[tostring(p.UserId)] then
            serverHop()
            return true
        end
        
        if p ~= game.Players.LocalPlayer then
            for _, botId in ipairs(botIDs) do
                if tostring(p.UserId) == tostring(botId) then
                    serverHop()
                    return true
                end
            end
        end
    end
    return false 
end

function optimizarJugador(char)
    if not char then return end

    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1
            part.CanCollide = false
            part.CastShadow = false
        elseif part:IsA("Decal") or part:IsA("Texture") then
            part.Transparency = 1
        elseif part:IsA("ParticleEmitter") or part:IsA("Trail") then
            part.Enabled = false
        elseif part:IsA("Sound") then
            part.Volume = 0
        end
    end
end

for _, plr in ipairs(game.Players:GetPlayers()) do
    if plr.Character then
        optimizarJugador(plr.Character)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    -- Si ServerHoop está desactivado, solo optimizar sin hacer hop
    if not getgenv().AutofarmSettings.ServerHoop.Toggle then
        newPlayer.CharacterAdded:Connect(function(char)
            task.wait(3)
            optimizarJugador(char)
        end)
        if newPlayer.Character then
            optimizarJugador(newPlayer.Character)
        end
        return
    end
    
    local blacklistedIDs = getgenv().AutofarmSettings.ServerHoop.Blacklisted_IDs or {}
    local combinedBlacklist = {}

    for _, id in ipairs(defaultBlacklistedIDs) do
        combinedBlacklist[tostring(id)] = true
    end

    for _, id in ipairs(blacklistedIDs) do
        combinedBlacklist[tostring(id)] = true
    end

    if combinedBlacklist[tostring(newPlayer.UserId)] then
        task.wait(1)
        serverHop()
    else
        newPlayer.CharacterAdded:Connect(function(char)
            task.wait(3)
            optimizarJugador(char)
        end)
        if newPlayer.Character then
            optimizarJugador(newPlayer.Character)
        end
    end
end)

local function checkDeaths()
    if not getgenv().AutofarmSettings.ServerHoop.Toggle then
        return
    end
    local maxDeaths = getgenv().AutofarmSettings.ServerHoop.Deaths or 0
    if maxDeaths > 0 and Kamaik.AutoFarm.deaths >= maxDeaths then
        Kamaik.AutoFarm.deaths = 0
        serverHop()
    end
end

local kickDetected = false

local function executeServerHop()
    if not getgenv().AutofarmSettings.ServerHoop.Toggle then
        return
    end
    if kickDetected then return end
    kickDetected = true
    task.wait(0.5)
    serverHop()
end

game.Players.PlayerRemoving:Connect(function(playerWhoLeft)
    if playerWhoLeft == player then
        executeServerHop()
    end
end)

player.AncestryChanged:Connect(function()
    if not player.Parent then
        executeServerHop()
    end
end)

pcall(function()
    game.CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == "ErrorPrompt" or string.find(child.Name, "Disconnect") then
            executeServerHop()
        end
    end)
end)

local function resetCharacter()
    if not Kamaik.yaProcesadoKO then
        Kamaik.yaProcesadoKO = true
        Kamaik.AutoFarm.isStomping = true
        Kamaik.AutoFarm.lastStompTime = tick()
        limpiarVuelo()
        
        Kamaik.AutoFarm.ignorados = {}
        Kamaik.AutoFarm.deaths += 1
        checkDeaths()

        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.Health = 0
        end
    end
end

checkBlacklistedPlayers()

player.CharacterAdded:Connect(function(char)
    task.spawn(function()
        local root = char:WaitForChild("HumanoidRootPart", 2)
        if not root then
            serverHop()
            return
        end
        
        task.wait(0.5)
        local isJailed, jailTime = checkJailStatus()
        if isJailed then
            Status.Text = "Anti-Jail: Jailed after respawn (" .. jailTime .. "s)"
            unJailProcess()
            return  
        end
        
        -- Solo si NO está jaileado, continuar normal
        root.CFrame = CFrame.new(0, 15000, 0)
        task.wait(0.2)
        teleportWithRandomFall()
        optimizarJugador(char)
        
        if Kamaik.yaProcesadoKO then
            task.wait(0.1)
            Kamaik.yaProcesadoKO = false
            Kamaik.AutoFarm.isStomping = false
            Status.Text = "Respawned successfully"
        end

        local bodyEffects = char:WaitForChild("BodyEffects", 10)
        local koStatus = bodyEffects and bodyEffects:FindFirstChild("K.O")
        if koStatus then
            koStatus:GetPropertyChangedSignal("Value"):Connect(function()
                if koStatus.Value then
                    resetCharacter()
                end
            end)
        end
    end)
end)

if player.Character then
    local bodyEffects = player.Character:FindFirstChild("BodyEffects")
    local koStatus = bodyEffects and bodyEffects:FindFirstChild("K.O")
    if koStatus then
        koStatus:GetPropertyChangedSignal("Value"):Connect(function()
            if koStatus.Value then
                limpiarVuelo()
                resetCharacter()
            end
        end)
    end
end

local function teleportTo(position)
    local char = player.Character or player.CharacterAdded:Wait()
    if not char then return end

    local root = char:FindFirstChild("HumanoidRootPart")
    if root then
        root.CFrame = CFrame.new(position)
    end
end

local function getNearestCashier()
    local char = player.Character or player.CharacterAdded:Wait()
    if not char then return end

    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local closest, shortest = nil, math.huge

    for _, v in pairs(workspace:WaitForChild("Cashiers"):GetChildren()) do
        if v.Name == "VAULT" or v:IsDescendantOf(workspace.Cashiers:FindFirstChild("VAULT")) then
            continue
        end

        if v:FindFirstChild("Head") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
            if Kamaik.AutoFarm.ignorados[v] then
                continue
            end

            local dist = (root.Position - v.Head.Position).Magnitude
            if dist < shortest then
                shortest, closest = dist, v
            end
        end
    end

    return closest
end


-- FUNCIÓN MODIFICADA PARA USAR LMG EN VEZ DE PUÑOS
local function superDisparo(target)
    if not target or not target:FindFirstChild("Head") then 
        return false 
    end
    
    local humanoid = target:FindFirstChild("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        return false
    end
    
    local char = player.Character or player.CharacterAdded:Wait()
    if not char then return false end

    -- Verificar munición de ambas armas
    local balasRifle = obtenerBalasRifle()
    local balasAUG = obtenerBalasAUG()
    
    -- Si Rifle tiene balas, disparar 1 SOLA BALA
    if balasRifle and balasRifle > 0 then
        Status.Text = "Equipping Rifle for 1 shot..."
        if not equiparArmas("Rifle") then
            Status.Text = "Failed to equip Rifle"
            return false
        end
        
        -- Disparar 1 BALA con Rifle
        Status.Text = "Shooting 1x Rifle"
        local tool = char:FindFirstChild("[Rifle]")
        if tool and tool:FindFirstChild("Handle") then
            local head = target:FindFirstChild("Head")
            if head then
                mainEvent:FireServer(
                    "ShootGun",
                    tool.Handle,
                    tool.Handle.CFrame.Position,
                    head.Position,
                    head,
                    Vector3.new(0, 0, -1)
                )
            end
        end
        task.wait(0.15)
    end
    
    -- Cambiar a AUG para el resto del combate
    Status.Text = "Switching to AUG..."
    if not equiparArmas("AUG") then
        Status.Text = "Failed to equip AUG"
        return false
    end
    
    -- Verificar que AUG tenga balas
    balasAUG = obtenerBalasAUG()
    if not balasAUG or balasAUG <= 0 then
        Status.Text = "AUG empty - reloading..."
        recargarAUG()
        task.wait(1)
        balasAUG = obtenerBalasAUG()
        if not balasAUG or balasAUG <= 0 then
            Status.Text = "No ammo available"
            return false
        end
    end
    
    -- Continuar disparando con AUG hasta matar
    Status.Text = "Shooting with AUG"
    startAutoShoot(target, "AUG")
    
    local maxWaitTime = 15
    local startTime = tick()
    
    while target and target.Parent and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0 do
        if (tick() - startTime) > maxWaitTime then
            Status.Text = "Shooting timeout"
            break
        end
        
        if not currentTarget then
            Status.Text = "Target cleared"
            break
        end
        
        -- Si AUG se queda sin balas durante combate, recargar
        local balasActuales = obtenerBalasAUG()
        if balasActuales and balasActuales == 0 then
            Status.Text = "AUG empty - reloading in combat..."
            stopAutoShoot()
            recargarAUG()
            task.wait(1)
            
            balasActuales = obtenerBalasAUG()
            if not balasActuales or balasActuales <= 0 then
                Status.Text = "Failed to reload AUG"
                break
            end
            
            startAutoShoot(target, "AUG")
        end
        
        task.wait(0.1)
    end
    
    stopAutoShoot()
    
    local targetMuerto = not target or not target.Parent or not target:FindFirstChild("Humanoid") or target.Humanoid.Health <= 0
    return targetMuerto
end

local function recogerDineroCerca()
    local dropFolder = Workspace:WaitForChild("Ignored"):WaitForChild("Drop")
    local char = player.Character or player.CharacterAdded:Wait()
    if not char then return false end

    local root = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChild("Humanoid")
    if not root or not humanoid then return false end

    local recogio = false
    for _, drop in ipairs(dropFolder:GetChildren()) do
        if drop:IsA("Part") and drop.Name:find("Money") and (drop.Position - root.Position).Magnitude <= 25 then
            local posDrop = CFrame.new(drop.Position.X, drop.Position.Y - 4, drop.Position.Z)
            Kamaik.targettp = posDrop
            local startTime = tick()

            while drop.Parent and tick() - startTime < 2 do
                local clickDetector = drop:FindFirstChildOfClass("ClickDetector")
                if clickDetector then
                    pcall(fireclickdetector, clickDetector)
                end
                task.wait(0.1)
            end
            humanoid.PlatformStand = false

            recogio = true
            task.wait(0.1)
        end
    end

    return recogio
end

-- API: registro y heartbeat
local function registrarBot(key, userId, dhcValue, statusValue, colorValue)
    pcall(function()
        request({
            Url = "https://kamaik-autofarm.uk/api/bots/add",
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({
                key = key,
                userId = userId,
                dhc = dhcValue,
                status = statusValue,
                color = colorValue
            })
        })
    end)
end

local function enviarHeartbeat(key, userId, dhcValue)
    pcall(function()
        request({
            Url = "https://kamaik-autofarm.uk/api/bots/heartbeat",
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({
                key = key,
                userId = userId,
                dhc = dhcValue
            })
        })
    end)
end

registrarBot(script_key, player.UserId, Kamaik.AutoFarm.dineroActual, "Farming", "green")

task.spawn(function()
    while true do
        enviarHeartbeat(script_key, player.UserId, Kamaik.AutoFarm.dineroActual)
        task.wait(60)
    end
end)

local function SacarBlacklist(target)
    Kamaik.AutoFarm.ignorados[target] = true
    task.wait(60)
    Kamaik.AutoFarm.ignorados[target] = nil
end

-- INICIALIZAR SISTEMA LMG
task.spawn(function()
    sistemaInicializado = false
    
    -- Verificar jail
    local isJailed, jailTime = checkJailStatus()
    if isJailed then
        Status.Text = "Anti-Jail: Detected jail (" .. jailTime .. "s)"
        unJailProcess()
        task.wait(5)
    end
    
    Status.Text = "Initializing LMG System..."
    
    -- Obtener armas si no las tiene
    if not tieneTodasLasArmas() then
        Status.Text = "Getting weapons..."
        attemptGetWeapons()
        task.wait(2)
    end
    
    -- TP random ANTES de recargar
    teleportWithRandomFall()
    task.wait(2)
    
    -- Equipar armas
    Status.Text = "Equipping weapons..."
    equiparArmas("Rifle")
    task.wait(1)
    
    -- Verificar munición
    local balasRifle = obtenerBalasRifle()
    local balasAUG = obtenerBalasAUG()
    
    print("[INIT] Ammo check - Rifle: " .. tostring(balasRifle) .. " | AUG: " .. tostring(balasAUG))
    
    -- Recargar lo que necesite
    if not balasRifle or balasRifle == 0 then
        Status.Text = "Reloading Rifle..."
        print("[INIT] Reloading Rifle")
        mainEvent:FireServer("Reload", player.Character:FindFirstChild("[Rifle]"))
        task.wait(2.5) -- ESPERA REAL DE RECARGA
    end
    
    if not balasAUG or balasAUG == 0 then
        Status.Text = "Reloading AUG..."
        print("[INIT] Reloading AUG")
        equiparArmas("AUG")
        task.wait(0.5)
        mainEvent:FireServer("Reload", player.Character:FindFirstChild("[AUG]"))
        task.wait(2.5) -- ESPERA REAL DE RECARGA
    end
    
    -- Verificar si necesita comprar
    task.wait(1)
    balasRifle = obtenerBalasRifle()
    balasAUG = obtenerBalasAUG()
    
    if (not balasRifle or balasRifle == 0) or (not balasAUG or balasAUG == 0) then
        Status.Text = "Need to buy ammo..."
        print("[INIT] Buying ammo")
        comprarAmmoCompleta()
        task.wait(3)
        
        teleportWithRandomFall()
        task.wait(2)
        
        equiparArmas("Rifle")
        task.wait(0.5)
        mainEvent:FireServer("Reload", player.Character:FindFirstChild("[Rifle]"))
        task.wait(2.5)
        
        equiparArmas("AUG")
        task.wait(0.5)
        mainEvent:FireServer("Reload", player.Character:FindFirstChild("[AUG]"))
        task.wait(2.5)
    end
    
    -- Verificación final
    balasRifle = obtenerBalasRifle()
    balasAUG = obtenerBalasAUG()
    print("[INIT] Final - Rifle: " .. tostring(balasRifle) .. " | AUG: " .. tostring(balasAUG))
    
    if (balasRifle and balasRifle > 0) and (balasAUG and balasAUG > 0) then
        Status.Text = "LMG System Ready!"
        sistemaInicializado = true
    else
        Status.Text = "System failed - retrying in 5s"
        task.wait(5)
        -- Reiniciar script completo
        player.Character.Humanoid.Health = 0
    end
    
    autoReloadSystem()
    task.wait(2)
    Status.Text = "Loading Modules..."
end)

task.wait(5)
task.spawn(function()
    while task.wait(1.5) do
        Kamaik.AutoFarm.TimeFarm += 1
        local horas = math.floor(Kamaik.AutoFarm.TimeFarm / 3600)
        local minutos = math.floor((Kamaik.AutoFarm.TimeFarm % 3600) / 60)
        local segundos = Kamaik.AutoFarm.TimeFarm % 60
        TimeDHC.Text = string.format("%02d:%02d:%02d", horas, minutos, segundos)
    end
end)

local noCashierTimer = 0

-- BUCLE PRINCIPAL 
task.spawn(function()
    while not sistemaInicializado do
        Status.Text = "Waiting for initialization..."
        task.wait(1)
    end
    while true do
        task.wait(0.1)
        if jailProcessActive then
            Status.Text = "Anti-Jail: Processing escape..."
            task.wait(2)
            continue
        end
        
        while Kamaik.AutoFarm.isStomping do
            Status.Text = "KO! Waiting for respawn"
            task.wait(1)
            
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                continue
            end
            
            local bodyEffects = player.Character:FindFirstChild("BodyEffects")
            local koStatus = bodyEffects and bodyEffects:FindFirstChild("K.O")
            if koStatus and not koStatus.Value then
                Kamaik.AutoFarm.isStomping = false
                Kamaik.yaProcesadoKO = false
                break
            end
        end
        
        -- pausa de 10 segundos después de reaparecer
        if Kamaik.AutoFarm.lastStompTime then
            local tiempoTranscurrido = tick() - Kamaik.AutoFarm.lastStompTime
            local tiempoRestante = 10 - tiempoTranscurrido

            if tiempoRestante > 0 then
                Status.Text = "Respawned. Waiting " .. math.ceil(tiempoRestante) .. "s..."
                task.wait(math.min(1, tiempoRestante))
                continue
            end
            
            Kamaik.AutoFarm.lastStompTime = nil
        end
        Status.Text = "Looking for ATM"

        local target = getNearestCashier()
        if target and target:FindFirstChild("Head") and target:FindFirstChild("Humanoid") then
            if target ~= Kamaik.AutoFarm.lastTarget then
                Kamaik.AutoFarm.lastTarget = target
                local posCajero = target:FindFirstChild("Head") and target.Head.Position
                if posCajero then
                    local char = player.Character
                    if char then
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            humanoid:UnequipTools()
                        end
                    end
                    Status.Text = "Random Tp + Fall"
                    
                    local config = obtenerConfigCajero(target.Head.Position)
                    local posicionVuelo = Vector3.new(
                        posCajero.X + config.offsetX,
                        posCajero.Y + config.offsetY,  
                        posCajero.Z + config.offsetZ   
                    )
                    local headCFrame = target.Head.CFrame
                    local x, y, z = headCFrame:ToEulerAnglesXYZ()
                    local entreMedio = CFrame.new(posicionVuelo) * CFrame.Angles(x, y, z)
                    activarVueloNuevo(entreMedio)
                end
            end
            
            local humanoid = target:FindFirstChild("Humanoid")
            if humanoid then
                local initialHealth, detectadoDano, muerto = humanoid.Health, false, false
                
                -- VERIFICAR QUE TENGA LAS ARMAS
                if not tieneTodasLasArmas() then
                    Status.Text = "No weapons - getting both..."
                    if attemptGetWeapons() then
                        Status.Text = "Weapons obtained!"
                    else
                        Status.Text = "Failed to get weapons"
                        Kamaik.AutoFarm.lastTarget = nil
                        task.wait(5)
                        continue
                    end
                end
                
                -- VERIFICAR MUNICIÓN DE AMBAS ARMAS
                local balasRifle = obtenerBalasRifle()
                local balasAUG = obtenerBalasAUG()

                -- Si AMBAS están vacías, comprar munición completa
                if (not balasRifle or balasRifle <= 0) and (not balasAUG or balasAUG <= 0) then
                    Status.Text = "No ammo - buying..."
                    currentTarget = nil
                    Kamaik.AutoFarm.lastTarget = nil
                    comprarAmmoCompleta()
                    task.wait(3)
                    recargarRifle()
                    task.wait(1)
                    recargarAUG()
                    task.wait(1)
                    
                    balasRifle = obtenerBalasRifle()
                    balasAUG = obtenerBalasAUG()
                    if (not balasRifle or balasRifle <= 0) and (not balasAUG or balasAUG <= 0) then
                        Status.Text = "Critical: No ammo available"
                        Kamaik.AutoFarm.lastTarget = nil
                        task.wait(5)
                        continue
                    end
                end
                
                -- Si solo AUG está vacía, recargarla
                if (not balasAUG or balasAUG <= 0) and balasRifle and balasRifle > 0 then
                    Status.Text = "AUG empty - reloading..."
                    recargarAUG()
                    task.wait(1)
                    balasAUG = obtenerBalasAUG()
                    if not balasAUG or balasAUG <= 0 then
                        Status.Text = "AUG reload failed - buying..."
                        comprarAmmoCompleta()
                        task.wait(3)
                        recargarAUG()
                        task.wait(1)
                    end
                end
                
                Status.Text = "Shooting ATM"
                detectadoDano = superDisparo(target)
                
                -- VERIFICAR SI EL TARGET SIGUE SIENDO VÁLIDO
                if not target or not target.Parent or not target:FindFirstChild("Humanoid") then
                    Status.Text = "Target became invalid"
                    Kamaik.AutoFarm.lastTarget = nil
                    continue
                end
                
                muerto = (target.Humanoid.Health <= 0)

                if not detectadoDano then
                    Status.Text = "ATM Mission Failed - no damage detected"
                    task.spawn(function() SacarBlacklist(target) end) 
                    Kamaik.AutoFarm.lastTarget = nil
                    continue
                end

                if not muerto then
                    Status.Text = "ATM Mission Failed - target survived"
                    task.spawn(function() SacarBlacklist(target) end)
                    Kamaik.AutoFarm.lastTarget = nil
                    continue
                end
                
                Status.Text = "ATM eliminated successfully"
            end

            -- Esperar drops de dinero
            local dropFolder = Workspace:WaitForChild("Ignored"):WaitForChild("Drop")
            local maxWait, waited, foundDrop = 3, 0, false
            while waited < maxWait do
                for _, drop in ipairs(dropFolder:GetChildren()) do
                    if drop:IsA("Part") and (drop.Position - target.Head.Position).Magnitude <= 10 then
                        foundDrop = true
                        break
                    end
                end
                if foundDrop then break end
                task.wait(0.1)
                waited += 0.1
            end

            task.wait(0.05)

            -- Recoger dinero
            local dineroRecogido, intentos = false, 0
            while not dineroRecogido and intentos < 10 do
                Status.Text = "Collecting Money"
                dineroRecogido = recogerDineroCerca()
                intentos += 1
                task.wait(0.5)
            end
            teleportWithRandomFall()
            task.wait(1)
        else
            noCashierTimer += 0.1
            if noCashierTimer >= 5 then
                Status.Text = "No ATM found, random tp..."
                teleportWithRandomFall()
                noCashierTimer = 0
            end
        end

    end
end)

function EliminarMapa()
    local mapPaths = {
        workspace:FindFirstChild("MAP") and workspace.MAP:FindFirstChild("Map"),
        workspace:FindFirstChild("MAP") and workspace.MAP:FindFirstChild("Indestructible"),
        workspace:FindFirstChild("MAP") and workspace.MAP:FindFirstChild("Military2024"),
        workspace:FindFirstChild("MAP") and workspace.MAP:FindFirstChild("slum"),
        workspace:FindFirstChild("VehicleSpawner"),
        workspace:FindFirstChild("Vehicles"),
        workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("ArcadeGames"),
        workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("HouseItemSale"),
        workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("HospitalJob.Can I get the Blue bottle"),
        workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Help the patient for money."),
        workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("HouseOwn")
    }

    for _, folder in ipairs(mapPaths) do
        if folder then
            folder:Destroy()
        end
    end
end

EliminarMapa()

if setfpscap then
    setfpscap(getgenv().AutofarmSettings["Fps"])
end

task.spawn(function()
    local stuckTimer = 0
    
    while true do
        task.wait(1)
        
        if Status.Text == "Respawned successfully" or Status.Text == "Resuming farm..." or Status.Text == "Shooting ATM" then
            stuckTimer = stuckTimer + 1
            
            if stuckTimer >= 50 then
                if not Kamaik.yaProcesadoKO then return end
                if not getgenv().AutofarmSettings.ServerHoop.Toggle then
                    Status.Text = "Bug detected - Resetting character..."
                    if player.Character and player.Character:FindFirstChild("Humanoid") then
                        player.Character.Humanoid.Health = 0
                    end
                    stuckTimer = 0
                else
                    Status.Text = "Server-Hop, bug detect"
                    serverHop()
                    break
                end
            end
        else
            stuckTimer = 0
        end
    end
end)
